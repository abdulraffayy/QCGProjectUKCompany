import { useState } from 'react';
import { Card, CardContent, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { QAQFLevels, QAQFCharacteristics } from "@/lib/qaqf";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from "@/components/ui/dialog";
import { apiRequest } from "@/lib/queryClient";

const ContentGenerator: React.FC = () => {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("content");
  const [contentType, setContentType] = useState("academic_paper");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [qaqfLevel, setQaqfLevel] = useState("");
  const [subject, setSubject] = useState("");
  const [selectedCharacteristics, setSelectedCharacteristics] = useState<number[]>([]);
  const [moduleCode, setModuleCode] = useState("");
  const [additionalInstructions, setAdditionalInstructions] = useState("");
  const [primarySourceMaterial, setPrimarySourceMaterial] = useState("");
  const [secondarySourceMaterial, setSecondarySourceMaterial] = useState("");
  const [extractCharacteristics, setExtractCharacteristics] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<any>(null);
  const [showPreview, setShowPreview] = useState(false);
  
  // Video specific options
  const [animationStyle, setAnimationStyle] = useState("2D Animation");
  const [videoDuration, setVideoDuration] = useState("3-5 minutes");
  const [videoDescription, setVideoDescription] = useState("");
  
  // Verification and moderation options
  const [verificationStatus, setVerificationStatus] = useState<string>("pending");
  const [moderationStatus, setModerationStatus] = useState<string>("pending");
  const [britishStandardsCompliance, setBritishStandardsCompliance] = useState<boolean>(false);
  const [complianceIssues, setComplianceIssues] = useState<string[]>([]);
  const [verifiedBy, setVerifiedBy] = useState<string>("");
  const [verificationDate, setVerificationDate] = useState<string>("");
  
  // Handling toggling of QAQF characteristics
  const handleCharacteristicToggle = (characteristicId: number) => {
    setSelectedCharacteristics(current => 
      current.includes(characteristicId) 
        ? current.filter(id => id !== characteristicId)
        : [...current, characteristicId]
    );
  };
  
  // Generate mock video content
  const generateMockVideo = () => {
    return {
      animationStyle: animationStyle,
      duration: videoDuration,
      description: videoDescription || `This video explores ${subject} with a focus on QAQF Level ${qaqfLevel} implementation.`,
      thumbnailUrl: "https://via.placeholder.com/640x360.png?text=Video+Thumbnail",
      url: "#video-preview"
    };
  };
  
  // Generate mock assessment content
  const generateMockAssessment = () => {
    return {
      type: "multiple-choice",
      questions: [
        {
          question: `What does QAQF Level ${qaqfLevel} primarily focus on?`,
          options: [
            "Basic content structure",
            "Advanced integration with pedagogical approaches",
            "Intermediate content organization",
            "Technical implementation details"
          ],
          correctAnswer: 1
        },
        {
          question: `Which of the following is NOT a characteristic of ${subject}?`,
          options: [
            "Critical analysis",
            "Evidence-based practice",
            "Theoretical foundations",
            "None of the above"
          ],
          correctAnswer: 3
        }
      ],
      timeLimit: 20,
      passingScore: 70
    };
  };
  
  // Handle content generation
  const handleGenerate = () => {
    if (!qaqfLevel) {
      toast({
        title: "Missing QAQF Level",
        description: "Please select a QAQF level for your content.",
        variant: "destructive"
      });
      return;
    }
    
    if (!subject) {
      toast({
        title: "Missing Subject",
        description: "Please enter a subject for your content.",
        variant: "destructive"
      });
      return;
    }
    
    if (selectedCharacteristics.length === 0) {
      toast({
        title: "No Characteristics Selected",
        description: "Please select at least one QAQF characteristic.",
        variant: "destructive"
      });
      return;
    }
    
    // Set initial quality assurance states
    setVerificationStatus("pending");
    setModerationStatus("pending");
    setBritishStandardsCompliance(false);
    setComplianceIssues([]);
    setVerifiedBy("");
    setVerificationDate("");

    setIsGenerating(true);
    
    // Simulating content generation
    setTimeout(() => {
      let mockContent;
      
      if (contentType === "video") {
        // Create video content
        mockContent = {
          id: Math.floor(Math.random() * 1000),
          type: "video",
          title: `${subject} (QAQF Level ${qaqfLevel})`,
          moduleCode: moduleCode || "EDU-101",
          qaqfLevel: parseInt(qaqfLevel),
          characteristics: extractCharacteristics && (primarySourceMaterial || secondarySourceMaterial)
            ? [...selectedCharacteristics, 1, 2, 3] // Simulate extracting additional characteristics
            : selectedCharacteristics,
          sourceMaterials: {
            primary: primarySourceMaterial || null,
            secondary: secondarySourceMaterial || null,
            extracted: extractCharacteristics
          },
          video: generateMockVideo(),
          assessment: generateMockAssessment()
        };
      } else {
        // Create text-based academic content with source material integration
        // Extract QAQF characteristics from source materials if enabled
        let extractedCharacteristics: number[] = [];
        let sourceAnalysis = "";
        
        if (extractCharacteristics) {
          // Process primary source material
          if (primarySourceMaterial) {
            // Analyze primary source for QAQF characteristics
            extractedCharacteristics = [...extractedCharacteristics, 1, 3, 5]; // These would come from AI analysis
            sourceAnalysis += "## Primary Source Analysis\n\n";
            sourceAnalysis += `Based on analysis of the primary source material, the following QAQF characteristics were identified:\n`;
            sourceAnalysis += `- Critical thinking (Level ${qaqfLevel})\n`;
            sourceAnalysis += `- Academic rigor (Level ${qaqfLevel})\n`;
            sourceAnalysis += `- Evidence-based practice (Level ${qaqfLevel})\n\n`;
            sourceAnalysis += `Key insights extracted:\n`;
            
            // Extract meaningful snippets from the primary source
            const primarySourceSnippet = primarySourceMaterial.length > 100 
              ? primarySourceMaterial.substring(0, 100) + "..." 
              : primarySourceMaterial;
            
            sourceAnalysis += `"${primarySourceSnippet}"\n\n`;
          }
          
          // Process secondary source material
          if (secondarySourceMaterial) {
            // Analyze secondary source for QAQF characteristics
            extractedCharacteristics = [...extractedCharacteristics, 2, 4, 6]; // These would come from AI analysis
            sourceAnalysis += "## Secondary Source Analysis\n\n";
            sourceAnalysis += `The secondary source material provides additional context for the following QAQF characteristics:\n`;
            sourceAnalysis += `- Ethical practice (Level ${qaqfLevel})\n`;
            sourceAnalysis += `- Professional standards (Level ${qaqfLevel})\n`;
            sourceAnalysis += `- Reflective practice (Level ${qaqfLevel})\n\n`;
            
            // Extract meaningful snippets from the secondary source
            const secondarySourceSnippet = secondarySourceMaterial.length > 100 
              ? secondarySourceMaterial.substring(0, 100) + "..." 
              : secondarySourceMaterial;
            
            sourceAnalysis += `"${secondarySourceSnippet}"\n\n`;
          }
        }
        
        // Combine selected and extracted characteristics
        const combinedCharacteristics = Array.from(new Set([...selectedCharacteristics, ...extractedCharacteristics]));
        
        // Generate content that explicitly references source materials and QAQF characteristics
        mockContent = {
          id: Math.floor(Math.random() * 1000),
          type: "academic_paper",
          title: `${subject} (QAQF Level ${qaqfLevel})`,
          moduleCode: moduleCode || "EDU-101",
          qaqfLevel: parseInt(qaqfLevel),
          characteristics: combinedCharacteristics,
          sourceMaterials: {
            primary: primarySourceMaterial || null,
            secondary: secondarySourceMaterial || null,
            extracted: extractCharacteristics
          },
          content: `# ${subject}\n\n## Module: ${moduleCode || 'EDU-101'}\n\n## QAQF Level ${qaqfLevel} Implementation\n\nThis academic content integrates QAQF framework Level ${qaqfLevel} with ${combinedCharacteristics.length} characteristics.\n\n### QAQF Characteristics Applied\n\n${combinedCharacteristics.map(id => {
            // Find the characteristic by ID
            const characteristic = QAQFCharacteristics.find(c => c.id === id);
            return `- Characteristic ${id}: ${characteristic ? characteristic.name : `Unknown (${id})`}`;
          }).join('\n')}\n\n${additionalInstructions ? `### Additional Requirements\n${additionalInstructions}\n\n` : ''}### Main Content\n\nThis academic content is structured according to QAQF Level ${qaqfLevel} standards, incorporating rigorous analysis and critical evaluation of the provided source materials.\n\n${sourceAnalysis}\n\n### Synthesis\n\nBased on the QAQF framework and the analyzed source materials, this academic paper presents a comprehensive approach to ${subject} that meets British educational standards and academic requirements.\n\n`,
          assessment: generateMockAssessment()
        };
      }
      
      setGeneratedContent(mockContent);
      setShowPreview(true);
      setIsGenerating(false);
      
      const successMessage = contentType === "video" 
        ? "Your video content has been generated successfully."
        : "Your academic content has been generated successfully.";
        
      toast({
        title: "Content Generated Successfully",
        description: `${successMessage} Please proceed to the Module tab to manage your content or to the Assessment in Progress page to add assessment materials.`,
      });
      
      // Switch to Content Preview tab after successful generation
      setTimeout(() => {
        setActiveTab("preview");
      }, 1000);
    }, 2000);
  };
  
  // Handle saving generated content
  const handleSaveContent = async () => {
    if (!generatedContent) {
      toast({
        title: "No Content to Save",
        description: "Please generate content first before saving.",
        variant: "destructive"
      });
      return;
    }
    
    setIsSaving(true);
    
    try {
      // In a real application, this would make an API call to save the content
      // Here we just simulate the backend saving process
      setTimeout(() => {
        setIsSaving(false);
        toast({
          title: "Content Saved Successfully",
          description: "Your content has been saved to the module library and can now be accessed from the Course Content tab.",
        });
        
        // Dispatch an event to switch to the Content tab in the parent component
        window.dispatchEvent(new CustomEvent('switchToContentTab'));
      }, 1000);
    } catch (error) {
      console.error('Error saving content:', error);
      toast({
        title: "Error Saving Content",
        description: "There was an error saving your content. Please try again.",
        variant: "destructive"
      });
      setIsSaving(false);
    }
  };
  
  return (
    <Card className="bg-white rounded-lg shadow overflow-hidden">
      <div className="p-6">
        <CardTitle className="text-lg font-bold mb-4">Course Generator</CardTitle>
        <p className="text-neutral-600 text-sm mb-6">Create academic course content aligned with QAQF framework</p>
        
        <div className="mb-4">
          <Label className="block text-sm font-medium text-neutral-700 mb-1">Content Type</Label>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 mt-1">
            <Button 
              variant={contentType === "academic_paper" ? "default" : "outline"}
              className="w-full justify-start"
              onClick={() => setContentType("academic_paper")}
            >
              <span className="material-icons text-sm mr-2">description</span>
              Academic Paper
            </Button>
            <Button 
              variant={contentType === "assignment" ? "default" : "outline"}
              className="w-full justify-start"
              onClick={() => setContentType("assignment")}
            >
              <span className="material-icons text-sm mr-2">assignment</span>
              Assignment
            </Button>
            <Button 
              variant={contentType === "lecture" ? "default" : "outline"}
              className="w-full justify-start"
              onClick={() => setContentType("lecture")}
            >
              <span className="material-icons text-sm mr-2">menu_book</span>
              Lecture Notes
            </Button>
            <Button 
              variant={contentType === "tutorial" ? "default" : "outline"}
              className="w-full justify-start"
              onClick={() => setContentType("tutorial")}
            >
              <span className="material-icons text-sm mr-2">school</span>
              Tutorial
            </Button>
            <Button 
              variant={contentType === "case_study" ? "default" : "outline"}
              className="w-full justify-start"
              onClick={() => setContentType("case_study")}
            >
              <span className="material-icons text-sm mr-2">psychology</span>
              Case Study
            </Button>
            <Button 
              variant={contentType === "video" ? "default" : "outline"}
              className="w-full justify-start"
              onClick={() => setContentType("video")}
            >
              <span className="material-icons text-sm mr-2">videocam</span>
              Video Content
            </Button>
          </div>
        </div>
        
        <Tabs defaultValue="content" value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid grid-cols-3 mb-4">
            <TabsTrigger value="content">Content</TabsTrigger>
            <TabsTrigger value="preview">Preview</TabsTrigger>
            <TabsTrigger value="approval">Approval</TabsTrigger>
          </TabsList>
          
          {/* Content Tab */}
          <TabsContent value="content">
            <div className="space-y-4">
              <div>
                <Label className="block text-sm font-medium text-neutral-700 mb-1">Module Title</Label>
                <Input
                  placeholder="Enter the subject or module title"
                  value={subject}
                  onChange={(e) => setSubject(e.target.value)}
                />
              </div>
              
              <div>
                <Label className="block text-sm font-medium text-neutral-700 mb-1">Module Code (Optional)</Label>
                <Input
                  placeholder="e.g. EDU101, BUS220"
                  value={moduleCode}
                  onChange={(e) => setModuleCode(e.target.value)}
                />
              </div>
              
              <div>
                <Label className="block text-sm font-medium text-neutral-700 mb-1">QAQF Level</Label>
                <Select 
                  value={qaqfLevel} 
                  onValueChange={setQaqfLevel}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select a QAQF level" />
                  </SelectTrigger>
                  <SelectContent>
                    {QAQFLevels.map((level) => (
                      <SelectItem key={level.id} value={level.id.toString()}>
                        {level.name}: {level.description}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label className="block text-sm font-medium text-neutral-700 mb-1">QAQF Characteristics</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 border rounded-md p-3 max-h-40 overflow-y-auto">
                  {QAQFCharacteristics.map((characteristic) => (
                    <div key={characteristic.id} className="flex items-center">
                      <Checkbox 
                        id={`characteristic-${characteristic.id}`}
                        checked={selectedCharacteristics.includes(characteristic.id)}
                        onCheckedChange={() => handleCharacteristicToggle(characteristic.id)}
                      />
                      <label 
                        htmlFor={`characteristic-${characteristic.id}`}
                        className="ml-2 text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                      >
                        {characteristic.name}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
              
              <div>
                <Label className="block text-sm font-medium text-neutral-700 mb-1">Additional Instructions (Optional)</Label>
                <Textarea
                  placeholder="Enter any additional instructions or requirements"
                  value={additionalInstructions}
                  onChange={(e) => setAdditionalInstructions(e.target.value)}
                  className="min-h-24"
                />
              </div>
              
              <div>
                <Label className="flex items-center text-sm font-medium text-neutral-700 mb-1">
                  <Checkbox 
                    id="extract-characteristics"
                    checked={extractCharacteristics}
                    onCheckedChange={(checked) => setExtractCharacteristics(checked === true)}
                    className="mr-2"
                  />
                  Extract additional QAQF characteristics from source materials
                </Label>
                
                <div className="space-y-3 mt-2">
                  <div className="border rounded-md p-4 bg-neutral-50">
                    <h4 className="font-medium mb-3">Source Materials</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <Label className="block text-sm font-medium text-neutral-700">Primary Source Material</Label>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="text-xs"
                            onClick={() => document.getElementById('primary-source-upload')?.click()}
                          >
                            <span className="material-icons text-xs mr-1">upload_file</span>
                            Upload File
                          </Button>
                          <input
                            id="primary-source-upload"
                            type="file"
                            accept=".pdf,.docx,.txt"
                            className="hidden"
                            onChange={(e) => {
                              const file = e.target.files?.[0];
                              if (file) {
                                // Show file name in a preview area
                                const reader = new FileReader();
                                reader.onload = (event) => {
                                  try {
                                    // For text files, we can directly set the content
                                    if (file.type === 'text/plain') {
                                      setPrimarySourceMaterial(event.target?.result as string);
                                    } else {
                                      // For other file types like PDF or DOCX, we would need server-side processing
                                      // For now, just show that the file was uploaded
                                      toast({
                                        title: "File uploaded successfully",
                                        description: `${file.name} has been uploaded as primary source material.`,
                                      });
                                      setPrimarySourceMaterial(`File uploaded: ${file.name} (${(file.size / 1024).toFixed(2)} KB)`);
                                    }
                                  } catch (error) {
                                    toast({
                                      title: "Error processing file",
                                      description: "Please try a different file format or paste the content directly.",
                                      variant: "destructive",
                                    });
                                  }
                                };
                                
                                if (file.type === 'text/plain') {
                                  reader.readAsText(file);
                                } else {
                                  // For other file types, just read as data URL to confirm upload
                                  reader.readAsDataURL(file);
                                }
                              }
                            }}
                          />
                        </div>
                        <Textarea
                          placeholder="Enter or paste primary source material content"
                          value={primarySourceMaterial}
                          onChange={(e) => setPrimarySourceMaterial(e.target.value)}
                          className="min-h-24"
                        />
                      </div>
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <Label className="block text-sm font-medium text-neutral-700">Secondary Source Material</Label>
                          <Button 
                            variant="outline" 
                            size="sm" 
                            className="text-xs"
                            onClick={() => document.getElementById('secondary-source-upload')?.click()}
                          >
                            <span className="material-icons text-xs mr-1">upload_file</span>
                            Upload File
                          </Button>
                          <input
                            id="secondary-source-upload"
                            type="file"
                            accept=".pdf,.docx,.txt"
                            className="hidden"
                            onChange={(e) => {
                              const file = e.target.files?.[0];
                              if (file) {
                                // Show file name in a preview area
                                const reader = new FileReader();
                                reader.onload = (event) => {
                                  try {
                                    // For text files, we can directly set the content
                                    if (file.type === 'text/plain') {
                                      setSecondarySourceMaterial(event.target?.result as string);
                                    } else {
                                      // For other file types like PDF or DOCX, we would need server-side processing
                                      // For now, just show that the file was uploaded
                                      toast({
                                        title: "File uploaded successfully",
                                        description: `${file.name} has been uploaded as secondary source material.`,
                                      });
                                      setSecondarySourceMaterial(`File uploaded: ${file.name} (${(file.size / 1024).toFixed(2)} KB)`);
                                    }
                                  } catch (error) {
                                    toast({
                                      title: "Error processing file",
                                      description: "Please try a different file format or paste the content directly.",
                                      variant: "destructive",
                                    });
                                  }
                                };
                                
                                if (file.type === 'text/plain') {
                                  reader.readAsText(file);
                                } else {
                                  // For other file types, just read as data URL to confirm upload
                                  reader.readAsDataURL(file);
                                }
                              }
                            }}
                          />
                        </div>
                        <Textarea
                          placeholder="Enter or paste secondary source material content"
                          value={secondarySourceMaterial}
                          onChange={(e) => setSecondarySourceMaterial(e.target.value)}
                          className="min-h-24"
                        />
                      </div>
                    </div>
                    
                    <div className="mb-2">
                      <Label className="block text-sm font-medium text-neutral-700 mb-1">Upload Additional Resources</Label>
                      <div className="border border-dashed rounded-md p-4 text-center">
                        <span className="material-icons text-neutral-400 text-3xl">cloud_upload</span>
                        <p className="text-sm text-neutral-600 mt-2">Drag and drop files here, or click to browse</p>
                        <p className="text-xs text-neutral-500 mt-1">Supports PDF, DOC, TXT (up to 10MB)</p>
                        <Button variant="outline" size="sm" className="mt-3">
                          Browse Files
                        </Button>
                      </div>
                    </div>
                    
                    {extractCharacteristics && (
                      <div className="mt-4 p-3 bg-green-50 rounded-md">
                        <p className="text-sm text-green-800">
                          <span className="font-medium">QAQF Extraction enabled:</span> The system will analyze your source materials to identify additional QAQF characteristics.
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex justify-end pt-4">
              <Button onClick={handleGenerate} disabled={isGenerating}>
                {isGenerating ? (
                  <>
                    <div className="mr-1 animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    Generating...
                  </>
                ) : (
                  "Generate Content"
                )}
              </Button>
            </div>
          </TabsContent>
          
          {/* Content Preview */}
          <TabsContent value="preview" className="space-y-4 pt-2">
            {generatedContent && (
              <div className="border rounded-md p-4 bg-white">
                <div className="mb-4 flex justify-between items-start">
                  <div>
                    <h3 className="text-lg font-medium">{generatedContent.title}</h3>
                    <div className="flex flex-wrap gap-2 mt-1">
                      <Badge variant="outline" className="bg-blue-50 text-blue-600">
                        QAQF Level {generatedContent.qaqfLevel}
                      </Badge>
                      <Badge variant="outline">
                        Module: {generatedContent.moduleCode}
                      </Badge>
                      <Badge variant="outline" className="bg-emerald-50 text-emerald-600">
                        Type: {generatedContent.type.replace('_', ' ')}
                      </Badge>
                    </div>
                  </div>
                  <Button 
                    variant="outline"
                    size="sm"
                    className="flex items-center"
                    onClick={() => {
                      setActiveTab("content");
                      setTimeout(() => {
                        handleGenerate();
                      }, 100);
                    }}
                  >
                    <span className="material-icons text-sm mr-1">refresh</span>
                    Regenerate
                  </Button>
                </div>
                
                {generatedContent.type === "video" ? (
                  <div>
                    <div className="aspect-video bg-neutral-100 rounded-md mb-4 flex items-center justify-center relative overflow-hidden">
                      <img 
                        src={generatedContent.video.thumbnailUrl} 
                        alt="Video Thumbnail" 
                        className="w-full h-full object-cover"
                      />
                      <div className="absolute inset-0 bg-black/40 flex items-center justify-center">
                        <div className="w-16 h-16 rounded-full bg-white/90 flex items-center justify-center">
                          <span className="material-icons text-3xl text-primary">play_arrow</span>
                        </div>
                      </div>
                    </div>
                    <div className="mb-4">
                      <h4 className="font-medium">Video Description</h4>
                      <p className="text-neutral-600 text-sm mt-1">{generatedContent.video.description}</p>
                    </div>
                    <div className="grid grid-cols-2 gap-4 mb-4">
                      <div>
                        <h4 className="font-medium text-sm">Animation Style</h4>
                        <p className="text-neutral-600 text-sm">{generatedContent.video.animationStyle}</p>
                      </div>
                      <div>
                        <h4 className="font-medium text-sm">Duration</h4>
                        <p className="text-neutral-600 text-sm">{generatedContent.video.duration}</p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="prose prose-sm max-w-none mb-4">
                    <pre className="whitespace-pre-wrap font-sans text-sm overflow-auto max-h-96 bg-neutral-50 rounded-md p-4">
                      {generatedContent.content}
                    </pre>
                  </div>
                )}
                
                <div className="mt-6">
                  <h4 className="font-medium mb-2">Next Steps</h4>
                  <p className="text-sm text-neutral-600 mb-4">
                    Your content has been generated. You can save it to your content library, or perform additional actions.
                  </p>
                  <div className="flex flex-wrap gap-3">
                    <Button onClick={handleSaveContent} disabled={isSaving}>
                      {isSaving ? (
                        <>
                          <div className="mr-1 animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                          Saving...
                        </>
                      ) : (
                        <>
                          <span className="material-icons text-sm mr-1">save</span>
                          Save Content
                        </>
                      )}
                    </Button>
                    <Button variant="outline" onClick={() => setActiveTab("approval")}>
                      <span className="material-icons text-sm mr-1">approval</span>
                      Proceed to Approval
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </TabsContent>
          
          {/* Approval Tab */}
          <TabsContent value="approval" className="space-y-4 pt-2">
            {generatedContent && (
              <div className="border rounded-md p-4 bg-white">
                <div className="mb-6">
                  <h3 className="text-lg font-medium mb-2">Content Approval Workflow</h3>
                  <p className="text-sm text-neutral-600">
                    Before your content can be published or used in modules, it needs to go through the approval process.
                    This ensures all content meets the required QAQF standards.
                  </p>
                </div>
                
                <div className="space-y-4">
                  <div className="border rounded-md p-4 bg-neutral-50">
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-medium">QAQF Compliance Check</h4>
                      <Badge variant="outline" className="bg-amber-100 text-amber-800">
                        Pending
                      </Badge>
                    </div>
                    <p className="text-sm text-neutral-600 mb-4">
                      Verify if the content meets all required characteristics for QAQF Level {generatedContent.qaqfLevel}.
                    </p>
                    <Button size="sm">Verify QAQF Compliance</Button>
                  </div>
                  
                  <div className="border rounded-md p-4 bg-neutral-50">
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-medium">British Standards Check</h4>
                      <Badge variant="outline" className="bg-neutral-100 text-neutral-800">
                        Not Checked
                      </Badge>
                    </div>
                    <p className="text-sm text-neutral-600 mb-4">
                      Ensure the content complies with British educational standards and terminologies.
                    </p>
                    <Button size="sm">Check Compliance</Button>
                  </div>
                  
                  <div className="border rounded-md p-4 bg-neutral-50">
                    <div className="flex items-center justify-between mb-3">
                      <h4 className="font-medium">Content Moderation</h4>
                      <Badge variant="outline" className="bg-neutral-100 text-neutral-800">
                        Not Started
                      </Badge>
                    </div>
                    <p className="text-sm text-neutral-600 mb-4">
                      Review content for clarity, pedagogy, and academic integrity.
                    </p>
                    <Button size="sm">Request Moderation</Button>
                  </div>
                </div>
                
                <div className="mt-6 bg-neutral-50 p-4 rounded-md">
                  <p className="text-sm text-neutral-700">
                    <span className="font-medium">Note:</span> For assessment-related verification and quality control, please visit the 
                    <a href="/assessment-in-progress" className="text-primary font-medium ml-1">Assessment in Progress</a> page.
                  </p>
                </div>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </Card>
  );
};

export default ContentGenerator;